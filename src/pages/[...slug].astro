---
import { getCollection } from 'astro:content'
import readingTime from 'reading-time'

import NewsletterSignup from '@/components/NewsletterSignup.astro'
import BlogPost from '@/layouts/BlogPost.astro'

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog')

  // Sort entries by date for better next/prev navigation
  const sortedEntries = [...blogEntries].sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  )

  return sortedEntries.map((entry, index) => {
    const readingTimeResult = readingTime(entry.body)

    let readingTimeStr
    if (readingTimeResult.minutes < 1) {
      readingTimeStr = 'Under 1 minute read'
    } else {
      const minutes = Math.ceil(readingTimeResult.minutes)
      readingTimeStr = `${minutes} minute read`
    }

    return {
      params: { slug: entry.slug },
      props: {
        entry,
        readingTimeValue: readingTimeStr,
        readingTimeStats: readingTimeResult,
        nextPost: index > 0 ? sortedEntries[index - 1] : null,
        prevPost:
          index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null
      }
    }
  })
}

const { entry, nextPost, prevPost, readingTimeValue } = Astro.props
const { Content } = await entry.render()

const finalReadingTime = entry.data.readingTime || readingTimeValue
---

<BlogPost {...entry.data} readingTime={finalReadingTime}>
  <div
    class="prose prose-zinc max-w-none dark:prose-invert prose-headings:scroll-mt-24 prose-headings:font-semibold prose-a:font-medium prose-a:text-zinc-800 prose-a:underline-offset-4 hover:prose-a:text-zinc-600 prose-img:rounded-xl dark:prose-a:text-zinc-300 dark:hover:prose-a:text-zinc-100"
  >
    <Content />
  </div>

  <div
    class="mt-12 grid grid-cols-1 gap-4 border-t border-zinc-200 pt-8 dark:border-zinc-800 sm:mt-16 sm:gap-6 sm:pt-12 md:grid-cols-2"
  >
    {
      prevPost && (
        <a
          href={`/${prevPost.slug}`}
          class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 sm:p-6"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
          <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 sm:mb-2 sm:gap-2 sm:text-sm">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="h-3 w-3 transition-transform duration-300 group-hover:-translate-x-1 sm:h-4 sm:w-4"
            >
              <path d="m15 18-6-6 6-6" />
            </svg>
            Previous Article
          </span>
          <h3 class="line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 sm:text-lg">
            {prevPost.data.title}
          </h3>
        </a>
      )
    }
    {
      nextPost && (
        <a
          href={`/${nextPost.slug}`}
          class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 sm:p-6 md:text-right"
        >
          <div class="absolute inset-0 bg-gradient-to-l from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
          <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 sm:mb-2 sm:gap-2 sm:text-sm md:justify-end">
            Next Article
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="h-3 w-3 transition-transform duration-300 group-hover:translate-x-1 sm:h-4 sm:w-4"
            >
              <path d="m9 18 6-6-6-6" />
            </svg>
          </span>
          <h3 class="line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 sm:text-lg">
            {nextPost.data.title}
          </h3>
        </a>
      )
    }
  </div>
  <div class="mt-12">
    <NewsletterSignup />
  </div>
</BlogPost>

<script>
  // Add copy buttons to code blocks
  function initializeCodeCopyButtons() {
    const codeBlocks = document.querySelectorAll('pre')

    codeBlocks.forEach((block) => {
      // Skip if already processed
      if (
        block.classList.contains('code-block-processed') ||
        block.querySelector('.copy-button')
      ) {
        return
      }

      block.classList.add('code-block-processed')

      // Create wrapper if not already wrapped
      let wrapper: HTMLDivElement
      const parent = block.parentNode as HTMLElement
      if (
        parent?.classList?.contains('relative') &&
        parent?.classList?.contains('group')
      ) {
        wrapper = parent as HTMLDivElement
      } else {
        wrapper = document.createElement('div')
        wrapper.className = 'relative group'
        parent?.insertBefore(wrapper, block)
        wrapper.appendChild(block)
      }

      // Add copy button
      const copyButton = document.createElement('button')
      copyButton.className =
        'copy-button absolute top-2 right-2 p-1.5 rounded-md bg-zinc-700/50 hover:bg-zinc-700 text-zinc-200 opacity-0 group-hover:opacity-100 transition-opacity duration-200'
      copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
        </svg>
      `

      copyButton.addEventListener('click', () => {
        const codeElement = block.querySelector('code')
        if (codeElement) {
          const code = codeElement.innerText
          navigator.clipboard.writeText(code)

          // Show copied feedback
          copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
            </svg>
          `

          setTimeout(() => {
            copyButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
              </svg>
            `
          }, 2000)
        }
      })

      wrapper.appendChild(copyButton)
    })
  }

  // Main initialization function
  function initializeBlogPost() {
    initializeCodeCopyButtons()

    // Scroll to hash if present in URL
    if (window.location.hash) {
      setTimeout(() => {
        const element = document.querySelector(window.location.hash)
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
      }, 100)
    }
  }

  // Initialize on various page load events
  document.addEventListener('DOMContentLoaded', initializeBlogPost)
  document.addEventListener('astro:page-load', initializeBlogPost)
</script>
