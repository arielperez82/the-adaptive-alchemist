---
import { getCollection } from 'astro:content'
import readingTime from 'reading-time'

import NewsletterSignup from '@/components/NewsletterSignup.astro'
import BlogPost from '@/layouts/BlogPost.astro'

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog')

  // Sort entries by date for better next/prev navigation
  const sortedEntries = [...blogEntries].sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  )

  return sortedEntries.map((entry, index) => {
    const readingTimeResult = readingTime(entry.body)

    let readingTimeStr
    if (readingTimeResult.minutes < 1) {
      readingTimeStr = 'Under 1 minute read'
    } else {
      const minutes = Math.ceil(readingTimeResult.minutes)
      readingTimeStr = `${minutes} minute read`
    }

    return {
      params: { slug: entry.slug },
      props: {
        entry,
        readingTimeValue: readingTimeStr,
        readingTimeStats: readingTimeResult,
        nextPost: index > 0 ? sortedEntries[index - 1] : null,
        prevPost:
          index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null
      }
    }
  })
}

const { entry, nextPost, prevPost, readingTimeValue } = Astro.props
const { Content } = await entry.render()

const finalReadingTime = entry.data.readingTime || readingTimeValue
---

<BlogPost {...entry.data} readingTime={finalReadingTime}>
  <div
    class="max-w-none prose-headings:scroll-mt-24 prose-headings:font-semibold prose-a:font-medium prose-a:text-zinc-800 prose-a:underline-offset-4 hover:prose-a:text-zinc-600 prose-img:rounded-xl dark:prose-a:text-zinc-300 dark:hover:prose-a:text-zinc-100"
  >
    <Content />
  </div>

  <div
    class="mt-12 grid grid-cols-1 gap-4 border-t border-zinc-200 pt-8 dark:border-zinc-800 sm:mt-16 sm:gap-6 sm:pt-12 md:grid-cols-2"
  >
    {
      prevPost && (
        <a
          href={`/${prevPost.slug}`}
          class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 sm:p-6"
        >
          <div class="absolute inset-0 bg-gradient-to-r from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
          <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 sm:mb-2 sm:gap-2 sm:text-sm">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="h-3 w-3 transition-transform duration-300 group-hover:-translate-x-1 sm:h-4 sm:w-4"
            >
              <path d="m15 18-6-6 6-6" />
            </svg>
            Previous Article
          </span>
          <h3 class="line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 sm:text-lg">
            {prevPost.data.title}
          </h3>
        </a>
      )
    }
    {
      nextPost && (
        <a
          href={`/${nextPost.slug}`}
          class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 sm:p-6 md:text-right"
        >
          <div class="absolute inset-0 bg-gradient-to-l from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
          <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 sm:mb-2 sm:gap-2 sm:text-sm md:justify-end">
            Next Article
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="h-3 w-3 transition-transform duration-300 group-hover:translate-x-1 sm:h-4 sm:w-4"
            >
              <path d="m9 18 6-6-6-6" />
            </svg>
          </span>
          <h3 class="line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 sm:text-lg">
            {nextPost.data.title}
          </h3>
        </a>
      )
    }
  </div>
  <div class="mt-12 border-t border-zinc-200 pt-8 dark:border-zinc-800">
    <div class="flex flex-col items-center justify-between gap-6">
      <NewsletterSignup />
    </div>
  </div>
</BlogPost>

<script>
  // Removing TOC-related functions

  // Add copy buttons to code blocks
  function initializeCodeCopyButtons() {
    const codeBlocks = document.querySelectorAll('pre')

    codeBlocks.forEach((block) => {
      // Skip if already processed by either method
      if (
        block.classList.contains('code-block-processed') ||
        block.classList.contains('enhanced')
      ) {
        return
      }

      block.classList.add('code-block-processed')

      // Create wrapper if not already wrapped
      let wrapper: HTMLDivElement
      const parent = block.parentNode as HTMLElement
      if (
        parent?.classList?.contains('relative') &&
        parent?.classList?.contains('group')
      ) {
        wrapper = parent as HTMLDivElement
      } else {
        wrapper = document.createElement('div')
        wrapper.className = 'relative group'
        parent?.insertBefore(wrapper, block)
        wrapper.appendChild(block)
      }

      // Add copy button if not already present
      if (
        wrapper &&
        !wrapper.querySelector('.copy-button') &&
        !wrapper.querySelector('.copy-code-button')
      ) {
        const copyButton = document.createElement('button')
        copyButton.className =
          'copy-button absolute top-2 right-2 p-1.5 rounded-md bg-zinc-700/50 hover:bg-zinc-700 text-zinc-200 opacity-0 group-hover:opacity-100 transition-opacity duration-200'
        copyButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
          </svg>
        `

        copyButton.addEventListener('click', () => {
          const codeElement = block.querySelector('code')
          if (codeElement) {
            const code = codeElement.innerText
            navigator.clipboard.writeText(code)

            // Show copied feedback
            copyButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
              </svg>
            `

            setTimeout(() => {
              copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
                </svg>
              `
            }, 2000)
          }
        })

        wrapper.appendChild(copyButton)
      }
    })
  }

  // Handle SPA transitions for blog post navigation
  function setupSPATransitions() {
    // Handle prev/next navigation links
    document.querySelectorAll('a[href^="/blog/"]').forEach((link) => {
      // Skip links that are anchor links or already processed
      const href = link.getAttribute('href')
      if (
        !href ||
        href.includes('#') ||
        link.hasAttribute('data-spa-handled')
      ) {
        return
      }

      // Mark as handled to avoid duplicate listeners
      link.setAttribute('data-spa-handled', 'true')

      link.addEventListener('click', function (this: HTMLElement, e: Event) {
        // Don't handle if modifier keys are pressed (for opening in new tab, etc.)
        if (
          (e as MouseEvent).metaKey ||
          (e as MouseEvent).ctrlKey ||
          (e as MouseEvent).shiftKey ||
          (e as MouseEvent).altKey
        ) {
          return
        }

        e.preventDefault()
        const targetHref = link.getAttribute('href')
        if (!targetHref) return

        // Trigger page transition animation
        const pageTransition = document.getElementById('page-transition')
        if (pageTransition) {
          pageTransition.classList.remove('opacity-0')
          pageTransition.classList.add('opacity-100')

          // Navigate after transition effect
          setTimeout(() => {
            window.location.href = targetHref
          }, 300)
        } else {
          // Fallback if transition element doesn't exist
          window.location.href = targetHref
        }
      })
    })
  }

  // Main initialization function
  function initializeBlogPost() {
    // Initialize remaining components
    initializeCodeCopyButtons()
    setupSPATransitions()

    // Scroll to hash if present in URL
    if (window.location.hash) {
      setTimeout(() => {
        const element = document.querySelector(window.location.hash)
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
      }, 100)
    }
  }

  // Initialize on first load
  document.addEventListener('DOMContentLoaded', initializeBlogPost)

  // Re-initialize when content changes via Astro's view transitions
  document.addEventListener('astro:page-load', initializeBlogPost)

  // For compatibility with custom transition system
  document.addEventListener('page-transition-complete', initializeBlogPost)
</script>

<style>
  /* Removing TOC-related styles */

  /* Language badge styling */
  .language-badge {
    font-family:
      ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
      'Courier New', monospace;
    letter-spacing: 0.05em;
    text-transform: lowercase;
  }

  /* Enhanced typography for blog content - Responsive adjustments */
  .prose {
    color: rgb(39 39 42);
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4 {
    color: rgb(24 24 27);
    font-weight: 600;
  }

  .prose h1 {
    font-size: 1.5rem;
  }

  .prose h2 {
    border-bottom: 1px solid rgb(228 228 231);
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
    margin-top: 2rem;
    padding-bottom: 0.5rem;
  }

  .prose h3 {
    font-size: 1.125rem;
    margin-bottom: 0.5rem;
    margin-top: 1.5rem;
  }

  .prose p {
    font-size: 0.875rem;
    line-height: 1.625;
    margin-bottom: 1rem;
  }

  .prose a {
    color: rgb(39 39 42);
    font-weight: 500;
    text-decoration: underline;
    text-decoration-color: rgb(161 161 170);
    text-underline-offset: 2px;
  }

  .prose blockquote {
    border-left: 4px solid rgb(212 212 216);
    color: rgb(63 63 70);
    font-style: italic;
    margin: 1rem 0;
    padding-left: 1rem;
  }

  .prose code {
    background-color: rgb(244 244 245);
    border-radius: 0.25rem;
    color: rgb(39 39 42);
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.125rem 0.375rem;
  }

  .prose pre {
    background-color: rgb(30 41 59);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 10%);
    color: rgb(228 228 231);
    font-size: 0.75rem;
    margin: 1rem 0;
    overflow-x: auto;
    padding: 0.75rem;
  }

  .prose pre code {
    background-color: transparent;
    color: rgb(228 228 231);
    padding: 0;
  }

  .prose img {
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 10%);
    height: auto;
    margin: 1.5rem auto;
    max-width: 100%;
  }

  .prose ul,
  .prose ol {
    margin: 1rem 0;
    padding-left: 1.25rem;
  }

  .prose li {
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .prose hr {
    border-color: rgb(228 228 231);
    margin: 2rem 0;
  }

  /* Line clamp for truncating text */
  .line-clamp-2 {
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    overflow: hidden;
  }

  /* Extra small screens */
  @media (width >= 480px) {
    .xs-inline {
      display: inline;
    }

    .xs-hidden {
      display: none;
    }
  }
</style>
