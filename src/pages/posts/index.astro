---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'

import OptimizedImage from '@/components/OptimizedImage.astro'
import { SITE_DESCRIPTION } from '@/consts'
import BaseLayout from '@/layouts/BaseLayout.astro'

const allPosts = (await getCollection('blog')) || []
const sortedPosts = allPosts.sort(
  (a, b) =>
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
)

// Group posts by month and year for timeline effect
const postsByYearAndMonth = sortedPosts.reduce<
  Record<string, Record<string, CollectionEntry<'blog'>[]>>
>((acc, post) => {
  const date = new Date(post.data.pubDate)
  const year = date.getFullYear()
  const month = date.toLocaleString('en-US', { month: 'long' })

  if (!acc[year]) acc[year] = {}
  if (!acc[year][month]) acc[year][month] = []
  acc[year][month].push(post)
  return acc
}, {})

const years = Object.keys(postsByYearAndMonth).sort(
  (a, b) => Number(b) - Number(a)
)
---

<BaseLayout title="Explore Posts">
  <div class="mx-auto w-full max-w-6xl px-4 py-10 sm:px-6 sm:py-16">
    <div class="relative mb-12 sm:mb-20">
      <div
        class="animate-blob absolute -left-10 -top-10 h-48 w-48 rounded-full bg-zinc-100 opacity-30 blur-3xl dark:bg-zinc-800/30 sm:-left-20 sm:-top-20 sm:h-72 sm:w-72"
      >
      </div>
      <div
        class="animate-blob animation-delay-2000 absolute -bottom-10 -right-10 h-48 w-48 rounded-full bg-zinc-200 opacity-30 blur-3xl dark:bg-zinc-800/30 sm:-bottom-20 sm:-right-20 sm:h-72 sm:w-72"
      >
      </div>

      <div class="relative text-center">
        <h1
          class="mb-4 text-3xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100 sm:text-4xl md:text-5xl"
        >
          Recent Posts
        </h1>

        <p
          class="mx-auto mb-6 max-w-2xl text-sm text-zinc-600 dark:text-zinc-400 sm:mb-10 sm:text-base"
        >
          {SITE_DESCRIPTION}
        </p>
      </div>
    </div>

    <div class="grid grid-cols-1 gap-6 sm:gap-8 md:grid-cols-12">
      {
        sortedPosts.length > 0 && (
          <div class="mb-8 sm:mb-12 md:col-span-12">
            <article class="group relative overflow-hidden rounded-none border-b border-zinc-200 pb-6 dark:border-zinc-800 sm:pb-8">
              <div class="flex h-full flex-col gap-6 sm:gap-8 md:flex-row">
                {sortedPosts[0].data.heroImage && (
                  <div class="mx-auto h-60 w-full max-w-full overflow-hidden sm:h-80 sm:max-w-md md:mx-0 md:h-96 md:w-1/2">
                    <OptimizedImage
                      src={sortedPosts[0].data.heroImage}
                      alt={sortedPosts[0].data.title}
                      class="h-full w-full object-cover transition-all duration-700 group-hover:scale-105"
                      loading="eager"
                    />
                  </div>
                )}
                <div class="flex flex-1 flex-col justify-center">
                  <div class="mb-3 flex items-center justify-center gap-2 text-xs text-zinc-500 dark:text-zinc-400 sm:text-sm md:justify-start">
                    <span class="font-medium uppercase tracking-wider">
                      Featured
                    </span>
                    <span class="h-px w-6 bg-zinc-300 dark:bg-zinc-700 sm:w-8" />
                    {sortedPosts[0].data.pubDate && (
                      <time
                        datetime={sortedPosts[0].data.pubDate.toISOString()}
                      >
                        {sortedPosts[0].data.pubDate.toLocaleDateString(
                          'en-US',
                          {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          }
                        )}
                      </time>
                    )}
                  </div>

                  <h2 class="mb-3 text-center text-2xl font-bold text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-zinc-100 dark:group-hover:text-zinc-300 sm:mb-4 sm:text-3xl md:text-left">
                    <a
                      href={`/${sortedPosts[0].slug}/`}
                      class="before:absolute before:inset-0"
                    >
                      {sortedPosts[0].data.title}
                    </a>
                  </h2>

                  <p class="mb-4 line-clamp-3 text-center text-sm text-zinc-600 dark:text-zinc-400 sm:mb-6 sm:text-base md:text-left">
                    {sortedPosts[0].data.description}
                  </p>

                  <div class="flex flex-wrap items-center justify-center gap-3 sm:gap-4 md:justify-start">
                    <div class="flex items-center text-xs text-zinc-500 dark:text-zinc-400 sm:text-sm">
                      <span class="inline-flex items-center">
                        {sortedPosts[0].data.readingTime || '5 min read'}
                      </span>
                    </div>

                    {sortedPosts[0].data.tags && (
                      <div class="flex flex-wrap justify-center gap-2 md:justify-start">
                        {sortedPosts[0].data.tags.slice(0, 2).map((tag) => (
                          <span class="border border-zinc-200 px-2 py-1 text-xs uppercase tracking-wider text-zinc-600 dark:border-zinc-800 dark:text-zinc-400 sm:px-3">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </article>
          </div>
        )
      }

      <div class="relative md:col-span-3">
        <div class="mb-8 space-y-4 md:sticky md:top-24 md:mb-0">
          <h3
            class="mb-4 text-center text-lg font-medium uppercase tracking-wider text-zinc-900 dark:text-zinc-100 md:text-left"
          >
            Archive
          </h3>

          <div
            class="hide-scrollbar flex overflow-x-auto pb-4 md:flex-col md:overflow-visible md:pb-0"
          >
            {
              years.map((year, yearIndex) => (
                <div class="flex flex-col md:w-full">
                  <a
                    href={`#year-${year}`}
                    class={`mr-3 flex items-center whitespace-nowrap rounded-full border-b border-zinc-100 px-4 py-2 transition-colors hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-900 md:mr-0 md:w-full md:whitespace-normal md:rounded-none md:px-0 md:py-3 ${yearIndex === 0 ? 'bg-zinc-50 dark:bg-zinc-800/50' : ''}`}
                  >
                    <span class="text-base font-medium text-zinc-900 dark:text-zinc-100 md:text-lg">
                      {year}
                    </span>
                    <span class="ml-2 text-xs text-zinc-500 dark:text-zinc-400 md:ml-auto md:text-sm">
                      {Object.values(postsByYearAndMonth[year]).flat().length}{' '}
                      post
                      {Object.values(postsByYearAndMonth[year]).flat()
                        .length !== 1
                        ? 's'
                        : ''}
                    </span>
                  </a>
                  <div class="hidden pl-4 md:block">
                    {Object.keys(postsByYearAndMonth[year])
                      .sort((a, b) => {
                        const months = [
                          'January',
                          'February',
                          'March',
                          'April',
                          'May',
                          'June',
                          'July',
                          'August',
                          'September',
                          'October',
                          'November',
                          'December'
                        ]
                        return months.indexOf(b) - months.indexOf(a)
                      })
                      .map((month) => (
                        <a
                          href={`#year-${year}-month-${month}`}
                          class="block py-1 text-sm text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100"
                        >
                          {month} ({postsByYearAndMonth[year][month].length})
                        </a>
                      ))}
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      </div>

      <div class="md:col-span-9">
        {
          years.map((year) => (
            <div id={`year-${year}`} class="mb-12 scroll-mt-16 sm:mb-20">
              <h2 class="mb-6 border-b border-zinc-200 pb-3 text-center text-xl font-bold text-zinc-900 dark:border-zinc-800 dark:text-zinc-100 sm:mb-8 sm:pb-4 sm:text-2xl md:text-left">
                {year}
              </h2>

              {Object.keys(postsByYearAndMonth[year])
                .sort((a, b) => {
                  const months = [
                    'January',
                    'February',
                    'March',
                    'April',
                    'May',
                    'June',
                    'July',
                    'August',
                    'September',
                    'October',
                    'November',
                    'December'
                  ]
                  return months.indexOf(b) - months.indexOf(a)
                })
                .map((month) => (
                  <div id={`year-${year}-month-${month}`} class="mb-8">
                    <h3 class="mb-4 text-lg font-semibold text-zinc-700 dark:text-zinc-300">
                      {month}
                    </h3>
                    <div
                      class={`grid grid-cols-1 ${postsByYearAndMonth[year][month].length >= 2 ? 'md:grid-cols-2' : 'md:grid-cols-1'} gap-8 sm:gap-12`}
                    >
                      {postsByYearAndMonth[year][month].map((post) => (
                        <article class="group relative mx-auto flex h-full w-full max-w-sm flex-col sm:max-w-md md:mx-0">
                          {post.data.heroImage && (
                            <div class="mb-4 h-48 overflow-hidden rounded-lg sm:h-56">
                              <OptimizedImage
                                src={post.data.heroImage}
                                alt={post.data.title}
                                class="h-full w-full object-cover transition-all duration-700 group-hover:scale-105"
                                loading="eager"
                              />
                            </div>
                          )}

                          <div class="flex flex-1 flex-col">
                            <div class="mb-2 flex flex-wrap items-center justify-center gap-3 text-xs text-zinc-500 dark:text-zinc-400 sm:mb-3 sm:gap-4 sm:text-sm md:justify-start">
                              {post.data.pubDate && (
                                <time
                                  datetime={post.data.pubDate.toISOString()}
                                  class="flex items-center"
                                >
                                  {post.data.pubDate.toLocaleDateString(
                                    'en-US',
                                    {
                                      month: 'short',
                                      day: 'numeric'
                                    }
                                  )}
                                </time>
                              )}
                              {post.data.readingTime && (
                                <span class="flex items-center">
                                  {post.data.readingTime}
                                </span>
                              )}
                            </div>

                            <h3 class="mb-2 text-center text-lg font-semibold text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-zinc-100 dark:group-hover:text-zinc-300 sm:mb-3 sm:text-xl md:text-left">
                              <a
                                href={`/${post.slug}/`}
                                class="before:absolute before:inset-0"
                              >
                                {post.data.title}
                              </a>
                            </h3>

                            <p class="mb-4 line-clamp-2 flex-grow text-center text-sm text-zinc-600 dark:text-zinc-400 md:text-left">
                              {post.data.description}
                            </p>

                            {post.data.tags && (
                              <div class="mt-auto flex flex-wrap justify-center gap-2 md:justify-start">
                                {post.data.tags.slice(0, 2).map((tag) => (
                                  <span class="border border-zinc-200 px-2 py-1 text-xs uppercase tracking-wider text-zinc-600 dark:border-zinc-800 dark:text-zinc-400 sm:px-3">
                                    {tag}
                                  </span>
                                ))}
                                {post.data.tags.length > 2 && (
                                  <span class="border border-zinc-200 px-2 py-1 text-xs uppercase tracking-wider text-zinc-600 dark:border-zinc-800 dark:text-zinc-400 sm:px-3">
                                    +{post.data.tags.length - 2}
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        </article>
                      ))}
                    </div>
                  </div>
                ))}
            </div>
          ))
        }
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  /* Base styles */
  :root {
    --theme-transition-duration: 0.5s;
    --theme-transition-timing: ease;
  }

  /* Components */
  .animate-blob {
    animation: blob-bounce 8s infinite ease;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }

  input:focus + div .search-pulse {
    animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .search-container:hover .search-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .line-clamp-2 {
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    overflow: hidden;
  }

  .line-clamp-3 {
    -webkit-box-orient: vertical;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    overflow: hidden;
  }

  /* Animations */
  @keyframes blob-bounce {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }

    25% {
      transform: translate(5%, 5%) scale(1.05);
    }

    50% {
      transform: translate(0, 10%) scale(1);
    }

    75% {
      transform: translate(-5%, 5%) scale(0.95);
    }
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 0;
    }

    50% {
      opacity: 1;
    }
  }

  /* Media queries */
  @media (width <= 640px) {
    a,
    button {
      align-items: center;
      display: flex;
      min-height: 44px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const backToTopButton = document.getElementById('back-to-top')

    if (backToTopButton) {
      // Show button when scrolled down
      const toggleBackToTopButton = () => {
        if (window.scrollY > 300) {
          backToTopButton.classList.remove('opacity-0', 'invisible')
          backToTopButton.classList.add('opacity-100', 'visible')
        } else {
          backToTopButton.classList.remove('opacity-100', 'visible')
          backToTopButton.classList.add('opacity-0', 'invisible')
        }
      }

      // Scroll to top when clicked
      backToTopButton.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        })
      })

      // Check scroll position
      window.addEventListener('scroll', toggleBackToTopButton)
      toggleBackToTopButton() // Initial check
    }

    // Add smooth scrolling to year links
    document.querySelectorAll('a[href^="#year-"]').forEach((anchor) => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault()
        const targetId = anchor.getAttribute('href')
        if (!targetId) return
        const targetElement = document.querySelector(targetId) as HTMLElement

        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 100,
            behavior: 'smooth'
          })

          // Update URL hash without jumping
          history.pushState('', '', targetId)
        }
      })
    })

    // Add touch support for hover effects
    const isTouchDevice =
      'ontouchstart' in window || navigator.maxTouchPoints > 0

    if (isTouchDevice) {
      const articles = document.querySelectorAll('article')

      articles.forEach((article) => {
        article.addEventListener('touchstart', () => {
          article.classList.add('is-touched')
        })

        article.addEventListener('touchend', () => {
          setTimeout(() => {
            article.classList.remove('is-touched')
          }, 300)
        })
      })
    }
  })

  // SPA transition handling
  function setupSPATransitions() {
    // Handle all blog post links for SPA transitions
    document.querySelectorAll('a[href]').forEach((link) => {
      const href = link.getAttribute('href')
      // Skip links that are anchor links, already processed, or excluded paths
      if (
        !href ||
        link.hasAttribute('data-spa-handled') ||
        href.includes('#') ||
        href.startsWith('/tags/') ||
        href.startsWith('/about/') ||
        href.startsWith('/rss.xml') ||
        href === '/'
      ) {
        return
      }

      // Mark as handled to avoid duplicate listeners
      link.setAttribute('data-spa-handled', 'true')

      link.addEventListener('click', (e) => {
        // Don't handle if modifier keys are pressed (for opening in new tab, etc.)
        if (
          e instanceof MouseEvent &&
          (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey)
        ) {
          return
        }

        e.preventDefault()
        const targetHref = link.getAttribute('href')
        if (!targetHref) return

        // Trigger page transition animation
        const pageTransition = document.getElementById('page-transition')
        if (pageTransition) {
          pageTransition.classList.remove('opacity-0')
          pageTransition.classList.add('opacity-100')

          // Navigate after transition effect
          setTimeout(() => {
            window.location.href = targetHref
          }, 300)
        } else {
          // Fallback if transition element doesn't exist
          window.location.href = targetHref
        }
      })
    })

    // Handle year anchor links specially
    document.querySelectorAll('a[href^="#year-"]').forEach((anchor) => {
      anchor.setAttribute('data-spa-internal', 'true')
    })
  }

  // Initialize on first load
  document.addEventListener('DOMContentLoaded', setupSPATransitions)

  // Re-initialize when content changes via Astro's view transitions
  document.addEventListener('astro:page-load', setupSPATransitions)

  // For compatibility with custom transition system
  document.addEventListener('page-transition-complete', setupSPATransitions)
</script>
