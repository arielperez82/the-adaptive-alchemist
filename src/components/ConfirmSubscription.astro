---
// ConfirmSubscription.astro - Handles subscription confirmation with token
---

<div
  class="theme-transition-all mx-auto max-w-2xl rounded-xl border border-zinc-200 bg-zinc-50 p-8 dark:border-zinc-800 dark:bg-zinc-800/50"
  id="confirm-subscription"
>
  <div class="text-center">
    <div id="loading-spinner" class="theme-transition-all mb-6">
      <div
        class="theme-transition-all mx-auto h-8 w-8 animate-spin rounded-full border-4 border-zinc-300 border-t-zinc-800 dark:border-zinc-600 dark:border-t-zinc-200"
      >
      </div>
    </div>

    <div id="message" class="mt-6 hidden rounded-lg p-4 text-sm"></div>

    <div id="success-content" class="mt-6 hidden">
      <div class="theme-transition-all mb-6 flex justify-center">
        <div
          class="theme-transition-all flex h-16 w-16 items-center justify-center rounded-full border-2 border-white bg-green-100 shadow-lg dark:border-zinc-900 dark:bg-green-800/20 sm:h-20 sm:w-20 sm:border-4"
        >
          <span class="text-2xl sm:text-3xl">✅</span>
        </div>
      </div>

      <h3
        class="theme-transition-color mb-4 text-xl font-bold text-zinc-900 dark:text-zinc-100"
      >
        Welcome to The Adaptive Alchemist!
      </h3>

      <p
        class="theme-transition-color mb-6 text-base text-zinc-600 dark:text-zinc-400"
      >
        Your subscription has been confirmed. You'll receive your first
        newsletter in the next few days.
      </p>

      <a
        href="/posts"
        class="theme-transition-all inline-flex items-center justify-center rounded-lg bg-zinc-900 px-6 py-3 text-base font-medium text-zinc-100 transition-colors hover:bg-zinc-700 dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-300 sm:px-8 sm:py-4 sm:text-lg"
      >
        Explore Our Articles
      </a>
    </div>

    <div id="error-content" class="mt-6 hidden">
      <div class="theme-transition-all mb-6 flex justify-center">
        <div
          class="theme-transition-all flex h-16 w-16 items-center justify-center rounded-full border-2 border-white bg-red-100 shadow-lg dark:border-zinc-900 dark:bg-red-800/20 sm:h-20 sm:w-20 sm:border-4"
        >
          <span class="text-2xl sm:text-3xl">❌</span>
        </div>
      </div>

      <h3
        class="theme-transition-color mb-4 text-xl font-bold text-zinc-900 dark:text-zinc-100"
      >
        Confirmation Failed
      </h3>

      <p
        class="theme-transition-color mb-6 text-base text-zinc-600 dark:text-zinc-400"
      >
        We couldn't confirm your subscription. The link may have expired or is
        invalid.
      </p>

      <a
        href="/"
        class="theme-transition-all inline-flex items-center justify-center rounded-lg bg-zinc-900 px-6 py-3 text-base font-medium text-zinc-100 transition-colors hover:bg-zinc-700 dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-300 sm:px-8 sm:py-4 sm:text-lg"
      >
        Return Home
      </a>
    </div>
  </div>
</div>

<script>
  const PUBLIC_SUPABASE_URL = import.meta.env.PUBLIC_SUPABASE_URL
  const PUBLIC_SUPABASE_ANON_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY

  // ConfirmSubscription component - handles subscription confirmation
  document.addEventListener('DOMContentLoaded', async () => {
    const loadingSpinner = document.getElementById(
      'loading-spinner'
    ) as HTMLDivElement
    const messageDiv = document.getElementById('message') as HTMLDivElement
    const successContent = document.getElementById(
      'success-content'
    ) as HTMLDivElement
    const errorContent = document.getElementById(
      'error-content'
    ) as HTMLDivElement

    if (!loadingSpinner || !messageDiv || !successContent || !errorContent) {
      return
    }

    const showMessage = (message: string, type: 'success' | 'error') => {
      messageDiv.textContent = message
      messageDiv.className = `theme-transition-all mt-6 rounded-lg p-4 text-sm ${
        type === 'success'
          ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-200'
          : 'bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300'
      }`
      messageDiv.classList.remove('hidden')
      messageDiv.style.opacity = '1'
      messageDiv.style.transition = 'opacity 0.3s ease-in'
    }

    const hideMessage = () => {
      messageDiv.style.transition = 'opacity 0.3s ease-out'
      messageDiv.style.opacity = '0'
      setTimeout(() => {
        // Start height collapse transition
        messageDiv.style.transition =
          'opacity 0.3s ease-out, height 0.4s ease-out, margin 0.4s ease-out, padding 0.4s ease-out'
        messageDiv.style.height = '0'
        messageDiv.style.margin = '0'
        messageDiv.style.padding = '0'
        messageDiv.style.overflow = 'hidden'

        setTimeout(() => {
          messageDiv.classList.add('hidden')
          messageDiv.style.opacity = ''
          messageDiv.style.transition = ''
          messageDiv.style.height = ''
          messageDiv.style.margin = ''
          messageDiv.style.padding = ''
          messageDiv.style.overflow = ''
        }, 360)
      }, 300)
    }

    const showSuccess = () => {
      loadingSpinner.classList.add('hidden')
      successContent.classList.remove('hidden')
      errorContent.classList.add('hidden')
    }

    const showError = () => {
      loadingSpinner.classList.add('hidden')
      errorContent.classList.remove('hidden')
      successContent.classList.add('hidden')
    }

    // Get token from URL parameters
    const urlParams = new URLSearchParams(window.location.search)
    const token = urlParams.get('token')

    if (!token) {
      showError()
      showMessage('No confirmation token provided.', 'error')
      setTimeout(hideMessage, 8000) // Hide error message after 8 seconds
      return
    }

    try {
      const response = await fetch(
        `${PUBLIC_SUPABASE_URL}/functions/v1/confirm-subscription`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${PUBLIC_SUPABASE_ANON_KEY}`
          },
          body: JSON.stringify({ token })
        }
      )

      const data = await response.json()

      if (response.ok) {
        showSuccess()
        showMessage(data.message, 'success')
        setTimeout(hideMessage, 5000)
        window.analytics.track('subscription_confirmation_success')
      } else {
        showError()
        showMessage(
          data.error || 'Confirmation failed. Please try again.',
          'error'
        )
        setTimeout(hideMessage, 5000)
        window.analytics.track('subscription_confirmation_error')
      }
    } catch (error) {
      console.error('Confirmation error:', error)
      showError()
      showMessage('Network error. Please try again.', 'error')
      setTimeout(hideMessage, 5000)
      window.analytics.track('subscription_confirmation_error')
    }
  })
</script>
