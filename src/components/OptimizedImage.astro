---
import type { ImageMetadata } from 'astro'
import type { HTMLAttributes } from 'astro/types'
import { Image } from 'astro:assets'

// Get all optimized images
const ALL_IMAGES = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/*.{jpeg,jpg,png,gif}'
)

type Props = HTMLAttributes<'img'> & {
  src: ImageMetadata | string
  alt: string
  width?: number
  height?: number
}

const { src, alt, width, height, ...rest } = Astro.props

const resolveImage = async (
  imagePath: string
): Promise<ImageMetadata | string> => {
  try {
    if (imagePath.startsWith('/assets/')) {
      // Import the image directly for local assets
      const resolvedImagePath = `/src${imagePath}`
      if (!ALL_IMAGES[resolvedImagePath]) {
        throw new Error(
          `"${resolvedImagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`
        )
      }
      const image = await ALL_IMAGES[resolvedImagePath]()
      return image.default
    } else if (imagePath.startsWith('/') && Astro.site) {
      return new URL(imagePath, Astro.site).toString()
    }
  } catch (error) {
    console.error(`Error processing imagePath: ${imagePath}`, error)
  }
  return imagePath
}

const resolvedImage = typeof src === 'string' ? await resolveImage(src) : src

const commonProps = {
  alt,
  ...rest
}
---

{
  typeof resolvedImage === 'string' ? (
    <Image
      src={src}
      width={width || 800}
      height={height || 600}
      {...commonProps}
    />
  ) : (
    <Image src={resolvedImage} {...commonProps} />
  )
}
