---

---

<button
  id="theme-toggle"
  data-theme-toggle
  class="group relative cursor-pointer overflow-hidden rounded-full p-1.5 transition-all duration-300 hover:bg-zinc-100 focus:outline-none focus:ring-2 focus:ring-zinc-300 active:scale-95 dark:hover:bg-zinc-800 dark:focus:ring-zinc-700 sm:p-2"
  aria-label="Toggle dark mode"
>
  <div class="relative z-10 flex h-5 w-5 items-center justify-center">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="absolute h-5 w-5 rotate-0 scale-100 text-zinc-800 transition-all duration-500 dark:-rotate-90 dark:scale-0 dark:text-zinc-200"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="12" cy="12" r="5"></circle>
      <path
        d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
      >
      </path>
    </svg>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="absolute h-5 w-5 rotate-90 scale-0 text-zinc-800 transition-all duration-500 dark:rotate-0 dark:scale-100 dark:text-zinc-200"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </div>

  <span
    class="absolute inset-0 h-full w-full bg-zinc-200 opacity-0 transition-opacity duration-300 group-active:opacity-20 dark:bg-zinc-700"
  >
  </span>
</button>

<script>
  // Theme toggle functionality
  function setupThemeToggle() {
    const themeToggles = document.querySelectorAll('[data-theme-toggle]')
    const prefersDarkMode = window.matchMedia(
      '(prefers-color-scheme: dark)'
    ).matches
    const currentTheme =
      localStorage.getItem('theme') || (prefersDarkMode ? 'dark' : 'light')

    // Apply theme on load
    if (currentTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }

    // Update logo visibility based on theme
    const updateLogos = (isDark: boolean) => {
      const logoImages = document.querySelectorAll(
        'img[alt="The Adaptive Alchemist logo"]'
      ) as NodeListOf<HTMLImageElement>
      logoImages.forEach((img) => {
        if (img.dataset.theme === 'dark') {
          img.classList.toggle('hidden', !isDark)
        } else {
          img.classList.toggle('hidden', isDark)
        }
      })
    }

    updateLogos(currentTheme === 'dark')

    // Toggle theme on click
    themeToggles.forEach((toggle) => {
      toggle.addEventListener('click', (e) => {
        e.preventDefault()

        const isDark = document.documentElement.classList.contains('dark')
        const newTheme = isDark ? 'light' : 'dark'

        // Toggle theme
        document.documentElement.classList.toggle('dark')
        localStorage.setItem('theme', newTheme)
        updateLogos(newTheme === 'dark')

        // Dispatch custom event
        document.dispatchEvent(
          new CustomEvent('themeChanged', {
            detail: { isDark: newTheme === 'dark' }
          })
        )
      })
    })
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', setupThemeToggle)

  // Check theme on visibility change
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      const storedTheme = localStorage.getItem('theme')
      const currentThemeIsDark =
        document.documentElement.classList.contains('dark')

      if (storedTheme === 'dark' && !currentThemeIsDark) {
        document.documentElement.classList.add('dark')
      } else if (storedTheme === 'light' && currentThemeIsDark) {
        document.documentElement.classList.remove('dark')
      }
    }
  })

  // Listen for system preference changes
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', ({ matches }) => {
      if (!localStorage.getItem('theme')) {
        if (matches) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }
    })
</script>
