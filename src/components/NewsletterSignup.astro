---
// NewsletterSignup.astro - Newsletter subscription form with double opt-in
---

<div
  class="rounded-xl border border-zinc-200 bg-zinc-50 p-6 transition-all duration-300 dark:border-zinc-800 dark:bg-zinc-800/50"
  id="newsletter-signup"
>
  <h3
    class="mb-2 text-lg font-semibold text-zinc-900 transition-colors duration-300 dark:text-zinc-100"
  >
    Subscribe to the newsletter
  </h3>
  <p
    class="mb-4 text-sm text-zinc-600 transition-colors duration-300 dark:text-zinc-400"
  >
    Get notified when new articles are published
  </p>

  <form id="newsletter-form" class="newsletter-form space-y-3">
    <div class="grid grid-cols-1 gap-3 sm:grid-cols-2">
      <input
        type="text"
        name="firstName"
        placeholder="First name"
        autocomplete="given-name"
        class="newsletter-firstName w-full rounded-lg border border-zinc-300 bg-white px-3 py-2 text-sm text-zinc-900 placeholder-zinc-400 transition-all duration-300 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-zinc-800 disabled:opacity-50 dark:border-zinc-600 dark:bg-zinc-700 dark:text-zinc-100 dark:placeholder-zinc-400 dark:focus:ring-zinc-200"
        disabled
      />
      <input
        type="text"
        name="lastName"
        placeholder="Last name (optional)"
        autocomplete="family-name"
        class="newsletter-lastName w-full rounded-lg border border-zinc-300 bg-white px-3 py-2 text-sm text-zinc-900 placeholder-zinc-400 transition-all duration-300 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-zinc-800 disabled:opacity-50 dark:border-zinc-600 dark:bg-zinc-700 dark:text-zinc-100 dark:placeholder-zinc-400 dark:focus:ring-zinc-200"
        disabled
      />
    </div>

    <div>
      <input
        type="email"
        name="email"
        placeholder="Enter your email"
        autocomplete="email"
        class="newsletter-email w-full rounded-lg border border-zinc-300 bg-white px-3 py-2 text-sm text-zinc-900 placeholder-zinc-400 transition-all duration-300 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-zinc-800 disabled:opacity-50 dark:border-zinc-600 dark:bg-zinc-700 dark:text-zinc-100 dark:placeholder-zinc-400 dark:focus:ring-zinc-200"
        required
        disabled
      />
    </div>

    <button
      type="submit"
      class="newsletter-submit w-full cursor-pointer rounded-lg bg-zinc-900 px-4 py-2 text-sm font-medium text-white transition-all duration-300 hover:bg-zinc-800 disabled:cursor-not-allowed disabled:opacity-50 dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-200"
      disabled
    >
      Subscribe
    </button>
  </form>

  <div
    class="newsletter-message mt-3 hidden rounded-lg p-3 text-sm transition-all duration-300"
  >
  </div>
</div>

<script
  is:inline
  define:vars={{
    PUBLIC_SUPABASE_URL: import.meta.env.PUBLIC_SUPABASE_URL,
    PUBLIC_SUPABASE_ANON_KEY: import.meta.env.PUBLIC_SUPABASE_ANON_KEY
  }}
>
  // Newsletter signup form handling
  function initializeNewsletterForm() {
    // Use class selectors instead of IDs to avoid conflicts
    const form = document.querySelector('.newsletter-form')
    const emailInput = document.querySelector('.newsletter-email')
    const firstNameInput = document.querySelector('.newsletter-firstName')
    const lastNameInput = document.querySelector('.newsletter-lastName')
    const submitButton = document.querySelector('.newsletter-submit')
    const messageDiv = document.querySelector('.newsletter-message')

    if (
      !form ||
      !emailInput ||
      !firstNameInput ||
      !lastNameInput ||
      !submitButton ||
      !messageDiv
    ) {
      return
    }

    // Check if already initialized
    if (form.dataset.initialized === 'true') {
      return
    }

    // Mark as initialized
    form.dataset.initialized = 'true'

    // Enable form inputs
    emailInput.disabled = false
    firstNameInput.disabled = false
    lastNameInput.disabled = false
    submitButton.disabled = false

    const showMessage = (message, type) => {
      messageDiv.textContent = message
      messageDiv.className = `newsletter-message mt-3 rounded-lg p-3 text-sm transition-all duration-300 ${
        type === 'success'
          ? 'bg-zinc-100 text-zinc-800 dark:bg-zinc-800 dark:text-zinc-200'
          : 'bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300'
      }`
      messageDiv.classList.remove('hidden')
    }

    const hideMessage = () => {
      messageDiv.classList.add('hidden')
    }

    const setLoading = (loading) => {
      submitButton.disabled = loading
      emailInput.disabled = loading
      firstNameInput.disabled = loading
      lastNameInput.disabled = loading
      submitButton.textContent = loading ? 'Subscribing...' : 'Subscribe'
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault()

      const email = emailInput.value.trim()
      const firstName = firstNameInput.value.trim()
      const lastName = lastNameInput.value.trim()

      if (!email || !firstName) {
        showMessage('Please provide your email and first name.', 'error')
        return
      }

      setLoading(true)
      hideMessage()

      try {
        // Note: You'll need to get these env vars differently in inline scripts
        const response = await fetch(
          `${PUBLIC_SUPABASE_URL || 'MISSING_SUPABASE_URL'}/functions/v1/subscribe`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${PUBLIC_SUPABASE_ANON_KEY || 'MISSING_PUBLIC_SUPABASE_ANON_KEY'}`
            },
            body: JSON.stringify({ email, firstName, lastName })
          }
        )

        const data = await response.json()

        if (response.ok) {
          showMessage(data.message, 'success')
          // Clear form on success
          emailInput.value = ''
          firstNameInput.value = ''
          lastNameInput.value = ''
          window.analytics.track('newsletter_signup_success')
        } else {
          showMessage(
            data.error || 'Something went wrong. Please try again.',
            'error'
          )
          window.analytics.track('newsletter_signup_error')
        }
      } catch (error) {
        console.error('Newsletter signup error:', error)
        showMessage('Network error. Please try again.', 'error')
        window.analytics.track('newsletter_signup_error')
      } finally {
        setLoading(false)
      }
    })
  }

  // Initialize on DOMContentLoaded (for hard refresh)
  document.addEventListener('DOMContentLoaded', initializeNewsletterForm)

  // Initialize on astro:page-load (for SPA navigation)
  document.addEventListener('astro:page-load', initializeNewsletterForm)

  // Initialize on astro:after-swap (for view transitions)
  document.addEventListener('astro:after-swap', initializeNewsletterForm)

  // Also run immediately if DOM is already loaded
  if (document.readyState !== 'loading') {
    initializeNewsletterForm()
  }
</script>
