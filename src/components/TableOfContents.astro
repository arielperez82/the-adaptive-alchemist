---
import type { Heading } from '@/utils/extractHeadings'

export interface Props {
  maxDepth?: number
  headings?: Heading[]
}

const { maxDepth = 3, headings = [] } = Astro.props

// Function to get the appropriate padding class based on heading depth
function getPaddingClass(depth: number): string {
  const paddingMap: Record<number, string> = {
    2: 'pl-0',
    3: 'pl-2',
    4: 'pl-4',
    5: 'pl-6',
    6: 'pl-8'
  }
  return paddingMap[depth] || 'pl-0'
}
---

<nav class="table-of-contents hidden lg:block" data-max-depth={maxDepth}>
  <div class="max-h-[calc(100vh-6rem)] overflow-y-auto" id="toc-container">
    <ul id="toc-list" class="mb-12 space-y-1">
      {
        headings
          .filter((heading) => maxDepth >= heading.depth)
          .map((heading) => {
            return (
              <li class={getPaddingClass(heading.depth)}>
                <a
                  href={`#${heading.slug}`}
                  class="toc-link text-md ml-2 mt-2 block border-l-2 border-transparent pl-2 text-zinc-500 transition-colors duration-200 hover:text-zinc-900 data-[active=true]:border-purple-500 data-[active=true]:font-semibold data-[active=true]:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100 dark:data-[active=true]:text-zinc-100"
                  data-heading-id={heading.slug}
                >
                  {heading.text}
                </a>
              </li>
            )
          })
      }
    </ul>
  </div>
</nav>

<script>
  function scrollActiveLinkIntoView(activeLink: HTMLElement) {
    const tocContainer = document.getElementById('toc-container') as HTMLElement

    if (!activeLink || !tocContainer) return

    const containerRect = tocContainer.getBoundingClientRect()
    const linkRect = activeLink.getBoundingClientRect()

    // Check if the active link is not visible in the container
    const isLinkAboveContainer = linkRect.top < containerRect.top
    const isLinkBelowContainer = linkRect.bottom > containerRect.bottom

    if (isLinkAboveContainer || isLinkBelowContainer) {
      // Calculate the scroll position to center the link in the container
      const containerHeight = containerRect.height
      const linkHeight = linkRect.height
      const scrollTop = tocContainer.scrollTop
      const linkOffsetTop = activeLink.offsetTop

      // Center the link in the container
      const targetScrollTop =
        linkOffsetTop - containerHeight / 2 + linkHeight / 2

      // Smooth scroll to the target position
      tocContainer.scrollTo({
        top: targetScrollTop,
        behavior: 'smooth'
      })
    }
  }

  function updateActiveTocLink() {
    const tocLinks = document.querySelectorAll('.toc-link')
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6')
    const viewportTop = window.scrollY + window.innerHeight * 0.15 // 15% from top

    let activeLink: HTMLElement | null = null

    // Find the heading that's currently in the 25% viewport area
    for (let i = headings.length - 1; i >= 0; i--) {
      const heading = headings[i] as HTMLElement
      const rect = heading.getBoundingClientRect()
      const headingTop = rect.top + window.scrollY

      if (headingTop <= viewportTop) {
        const headingId = heading.id
        activeLink = document.querySelector(`[data-heading-id="${headingId}"]`)
        break
      }
    }

    // Remove active class from all links
    tocLinks.forEach((link) => {
      link.removeAttribute('data-active')
    })

    // Add active class to the current active link
    if (activeLink) {
      activeLink.setAttribute('data-active', 'true')
      // Scroll the active link into view if it's not visible
      scrollActiveLinkIntoView(activeLink)
    }
  }

  // Update on scroll and on page load
  window.addEventListener('scroll', updateActiveTocLink, { passive: true })
  window.addEventListener('load', updateActiveTocLink)

  // Also update when the page is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateActiveTocLink)
  } else {
    updateActiveTocLink()
  }
</script>
