---
import '@/styles/global.css'

import { SEO } from 'astro-seo'

import Background from '@/components/Background.astro'
import Footer from '@/components/Footer.astro'
import Navigation from '@/components/Navigation.astro'
import { SITE_DESCRIPTION, SITE_TITLE } from '@/consts'

export interface Props {
  title: string
  description?: string
  image?: string
  article?: boolean
}

const {
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  image,
  article = false
} = Astro.props
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/the-adaptive-alchemist-logo-transparent.svg"
    />
    <meta name="generator" content={Astro.generator} />

    <SEO
      title={title}
      description={description}
      openGraph={{
        basic: {
          title,
          type: article ? 'article' : 'website',
          image: image || '/the-adaptive-alchemist-logo-transparent.png'
        },
        optional: {
          description,
          siteName: SITE_TITLE
        }
      }}
      twitter={{
        creator: '@arielxperez',
        card: 'summary_large_image'
      }}
      extend={{
        link: [
          { rel: 'preconnect', href: 'https://fonts.googleapis.com' },
          {
            rel: 'preconnect',
            href: 'https://fonts.gstatic.com',
            crossorigin: ''
          },
          {
            rel: 'stylesheet',
            href: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'
          },
          // Apple Touch Icon
          { rel: 'apple-touch-icon', href: '/apple-touch-icon.png' },
          // Standard favicons
          {
            rel: 'icon',
            type: 'image/png',
            sizes: '16x16',
            href: '/favicon-16x16.png'
          },
          {
            rel: 'icon',
            type: 'image/png',
            sizes: '32x32',
            href: '/favicon-32x32.png'
          },
          {
            rel: 'icon',
            type: 'image/svg+xml',
            href: '/the-adaptive-alchemist-logo-transparent.svg'
          },
          // Microsoft Tile
          {
            rel: 'msapplication-TileImage',
            href: '/the-adaptive-alchemist-logo-transparent.png'
          },
          // Web App Manifest
          { rel: 'manifest', href: '/site.webmanifest' }
        ],
        meta: [
          { name: 'mobile-web-app-capable', content: 'yes' },
          // Apple specific
          { name: 'apple-mobile-web-app-status-bar-style', content: 'default' },
          { name: 'apple-mobile-web-app-title', content: SITE_TITLE },
          // Microsoft specific
          { name: 'msapplication-TileColor', content: '#18181b' },
          { name: 'msapplication-config', content: '/browserconfig.xml' },
          // Theme color for mobile browsers
          { name: 'theme-color', content: '#18181b' },
          {
            name: 'theme-color',
            content: '#ffffff',
            media: '(prefers-color-scheme: light)'
          },
          {
            name: 'theme-color',
            content: '#18181b',
            media: '(prefers-color-scheme: dark)'
          }
        ]
      }}
    />
    <script
      is:inline
      defer
      src="https://unpkg.com/@tinybirdco/flock.js"
      data-token={import.meta.env.PUBLIC_TINYBIRD_TRACKER_TOKEN}
      data-host={import.meta.env.PUBLIC_TINYBIRD_HOST}
      data-tb-site={'the-adaptive-alchemist'}
      web-vitals="true"
    ></script>
  </head>
  <body
    class="flex min-h-screen flex-col bg-white text-zinc-900 transition-colors duration-300 dark:bg-zinc-900 dark:text-zinc-100"
  >
    <div
      id="page-transition"
      class="pointer-events-none fixed inset-0 z-40 flex items-center justify-center bg-white opacity-0 transition-opacity duration-300 dark:bg-zinc-900"
    >
      <div
        class="h-8 w-8 animate-spin rounded-full border-4 border-zinc-300 border-t-blue-600 dark:border-zinc-600 dark:border-t-blue-400"
      >
      </div>
    </div>

    <Background />

    <div class="mx-auto w-full max-w-6xl flex-grow px-4 sm:px-6">
      <Navigation />
      <main class="py-12 transition-all duration-500">
        <slot />
      </main>
    </div>
    <Footer />

    <script>
      // Enhanced SPA transition system
      document.addEventListener('DOMContentLoaded', () => {
        const pageTransition = document.getElementById('page-transition')
        const mainContent = document.querySelector('main')

        // Initialize content with entrance animation
        if (mainContent) {
          mainContent.classList.add('animate-fade-in')
        }

        // Function to load content via fetch
        async function loadContent(url: string) {
          try {
            if (pageTransition) {
              pageTransition.classList.remove(
                'opacity-0',
                'pointer-events-none'
              )
              pageTransition.classList.add('opacity-100')
            }

            if (mainContent) {
              mainContent.classList.add('opacity-0', 'translate-y-4')
            }

            const response = await fetch(url)
            if (!response.ok) throw new Error(`Failed to fetch ${url}`)
            const html = await response.text()

            const parser = new DOMParser()
            const doc = parser.parseFromString(html, 'text/html')

            const newContent = doc.querySelector('main')
            if (!newContent) throw new Error('Could not find main content')

            const newTitle = doc.querySelector('title')
            if (newTitle) {
              document.title = newTitle.textContent || ''
            }

            const newDescription = doc.querySelector('meta[name="description"]')
            if (newDescription) {
              const currentDescription = document.querySelector(
                'meta[name="description"]'
              )
              if (currentDescription) {
                currentDescription.setAttribute(
                  'content',
                  newDescription.getAttribute('content') || ''
                )
              }
            }

            // Update canonical URL
            const newCanonical = doc.querySelector('link[rel="canonical"]')
            if (newCanonical) {
              const currentCanonical = document.querySelector(
                'link[rel="canonical"]'
              )
              if (currentCanonical) {
                currentCanonical.setAttribute(
                  'href',
                  newCanonical.getAttribute('href') || ''
                )
              }
            }

            // Update Open Graph URL
            const newOgUrl = doc.querySelector('meta[property="og:url"]')
            if (newOgUrl) {
              const currentOgUrl = document.querySelector(
                'meta[property="og:url"]'
              )
              if (currentOgUrl) {
                currentOgUrl.setAttribute(
                  'content',
                  newOgUrl.getAttribute('content') || ''
                )
              }
            }

            // Update Open Graph Title
            const newOgTitle = doc.querySelector('meta[property="og:title"]')
            if (newOgTitle) {
              const currentOgTitle = document.querySelector(
                'meta[property="og:title"]'
              )
              if (currentOgTitle) {
                currentOgTitle.setAttribute(
                  'content',
                  newOgTitle.getAttribute('content') || ''
                )
              }
            }

            // Update Twitter Card URL
            const newTwitterUrl = doc.querySelector('meta[name="twitter:url"]')
            if (newTwitterUrl) {
              const currentTwitterUrl = document.querySelector(
                'meta[name="twitter:url"]'
              )
              if (currentTwitterUrl) {
                currentTwitterUrl.setAttribute(
                  'content',
                  newTwitterUrl.getAttribute('content') || ''
                )
              }
            }

            await new Promise((resolve) => setTimeout(resolve, 300))

            if (mainContent && newContent) {
              mainContent.innerHTML = newContent.innerHTML

              // Run scripts in new content
              Array.from(newContent.querySelectorAll('script')).forEach(
                (oldScript) => {
                  const newScript = document.createElement('script')
                  Array.from(oldScript.attributes).forEach((attr) => {
                    newScript.setAttribute(attr.name, attr.value)
                  })
                  newScript.textContent = oldScript.textContent
                  mainContent.appendChild(newScript)
                }
              )
            }

            if (mainContent) {
              mainContent.classList.remove('opacity-0', 'translate-y-4')
              mainContent.classList.add('animate-fade-in')
            }

            if (pageTransition) {
              setTimeout(() => {
                pageTransition.classList.add('opacity-0', 'pointer-events-none')
                pageTransition.classList.remove('opacity-100')
              }, 200)
            }

            document.dispatchEvent(
              new CustomEvent('spa-content-loaded', { detail: { url } })
            )

            // Handle anchor links properly
            const urlObj = new URL(url)
            if (urlObj.hash) {
              const targetElement = document.querySelector(urlObj.hash)
              if (targetElement) {
                setTimeout(() => {
                  targetElement.scrollIntoView({ behavior: 'smooth' })
                }, 100)
              }
            } else {
              window.scrollTo(0, 0)
            }

            attachLinkListeners()
          } catch (error) {
            console.error('Error loading content:', error)
            window.location.href = url
          }
        }

        // Attach event listeners to links
        function attachLinkListeners() {
          document.querySelectorAll('a').forEach((link) => {
            if (
              link.hasAttribute('data-spa-handled') ||
              !link.href.startsWith(window.location.origin) ||
              link.hasAttribute('target') ||
              link.hasAttribute('download') ||
              link.getAttribute('rel') === 'external'
            ) {
              return
            }

            link.setAttribute('data-spa-handled', 'true')

            link.addEventListener('click', (e) => {
              if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
                return
              }

              e.preventDefault()
              const targetHref = link.href

              if (targetHref === window.location.href) {
                return
              }

              // Handle anchor links on the same page
              const urlObj = new URL(targetHref)
              const currentUrlObj = new URL(window.location.href)

              if (urlObj.pathname === currentUrlObj.pathname && urlObj.hash) {
                // Same page anchor link - let it scroll naturally
                const targetElement = document.querySelector(urlObj.hash)
                if (targetElement) {
                  targetElement.scrollIntoView({ behavior: 'smooth' })
                  window.history.pushState({ path: targetHref }, '', targetHref)
                  return
                }
              }

              window.history.pushState({ path: targetHref }, '', targetHref)
              loadContent(targetHref)
            })
          })
        }

        attachLinkListeners()

        window.addEventListener('popstate', (e) => {
          if (e.state && e.state.path) {
            loadContent(e.state.path)
          } else {
            loadContent(window.location.href)
          }
        })
      })

      // Theme handling
      function setupThemeHandling() {
        const theme = localStorage.getItem('theme')
        if (
          theme === 'dark' ||
          (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
        ) {
          document.documentElement.classList.add('dark')
        } else {
          document.documentElement.classList.remove('dark')
        }
      }

      document.addEventListener('DOMContentLoaded', setupThemeHandling)

      // Track the previous pathname to detect actual page changes
      let previousPathname = window.location.pathname

      window.addEventListener('astro:page-load', () => {
        const currentPathname = window.location.pathname

        // Only trigger analytics if we're actually navigating to a different page
        if (currentPathname !== previousPathname) {
          window.dispatchEvent(new Event('popstate')) // Force the flock.js page_hit event to emit on SPA navigation
        }

        // Update the previous pathname for the next comparison
        previousPathname = currentPathname
      })
    </script>
  </body>
</html>
