---
import FormattedDate from '@/components/FormattedDate.astro'
import OptimizedImage from '@/components/OptimizedImage.astro'
import ShareButtons from '@/components/ShareButtons.astro'
import TagList from '@/components/TagList.astro'

import Layout from './Layout.astro'

export interface Props {
  title: string
  description: string
  pubDate: Date
  updatedDate?: Date
  heroImage?: string
  readingTime?: string
  tags?: string[]
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  readingTime = '5 min read',
  tags = []
} = Astro.props

let canonicalURL
try {
  canonicalURL = new URL(Astro.url.pathname, Astro.site)
} catch (error) {
  console.error('Error creating canonical URL:', error)
  canonicalURL = new URL(import.meta.env.SITE)
}
---

<Layout title={title} description={description}>
  <article class="mx-auto max-w-4xl animate-fade-in">
    <div class="mb-12">
      <h1
        class="mb-4 text-4xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100 sm:text-5xl"
      >
        {title}
      </h1>

      <div
        class="mb-6 flex items-center gap-x-4 text-sm text-zinc-500 dark:text-zinc-400"
      >
        <FormattedDate date={pubDate} />
        {readingTime && <span>Â· {readingTime}</span>}
      </div>

      <TagList tags={tags} class="mt-2" />
    </div>

    {
      heroImage && (
        <div class="relative mb-8 overflow-hidden rounded-xl shadow-lg sm:mb-12">
          <div class="aspect-[16/9] w-full">
            <OptimizedImage
              src={heroImage}
              alt={title}
              class="h-full w-full object-cover transition-transform duration-700 hover:scale-105"
              loading="eager"
            />
          </div>
          <div class="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent" />
        </div>
      )
    }

    <div
      class="prose prose-zinc max-w-none dark:prose-invert prose-headings:scroll-mt-24 prose-a:font-medium"
    >
      <slot />
    </div>

    <div class="mt-12 border-t border-zinc-200 pt-8 dark:border-zinc-800">
      <div class="flex flex-col items-center justify-between gap-6 sm:flex-row">
        <ShareButtons url={canonicalURL.toString()} title={title} />
      </div>
    </div>

    {
      updatedDate && (
        <div class="mt-8 text-sm italic text-zinc-500 dark:text-zinc-400">
          Last updated on <FormattedDate date={updatedDate} />
        </div>
      )
    }
  </article>

  <slot name="after-article" />
</Layout>

<script>
  // Enhanced code block functionality
  function enhanceCodeBlocks() {
    const codeBlocks = document.querySelectorAll('pre')

    codeBlocks.forEach((block) => {
      if (block.querySelector('.copy-button')) return

      const wrapper = document.createElement('div')
      wrapper.className = 'relative group'
      block.parentNode?.insertBefore(wrapper, block)
      wrapper.appendChild(block)

      const copyButton = document.createElement('button')
      copyButton.className =
        'copy-button absolute top-2 right-2 p-2 rounded-md bg-zinc-700/50 hover:bg-zinc-700 text-zinc-200 opacity-0 group-hover:opacity-100 transition-opacity duration-200'
      copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
        </svg>
      `

      copyButton.addEventListener('click', () => {
        const code = block.querySelector('code')?.textContent || ''
        navigator.clipboard.writeText(code)

        copyButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
          </svg>
        `

        setTimeout(() => {
          copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
            </svg>
          `
        }, 2000)
      })

      wrapper.appendChild(copyButton)
    })
  }

  // Initialize enhancements
  function initializeBlogPost() {
    enhanceCodeBlocks()

    // Smooth scroll to hash if present
    if (window.location.hash) {
      setTimeout(() => {
        const element = document.querySelector(window.location.hash)
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
      }, 100)
    }
  }

  // Initialize on various page load events
  document.addEventListener('DOMContentLoaded', initializeBlogPost)
  document.addEventListener('astro:page-load', initializeBlogPost)
</script>
